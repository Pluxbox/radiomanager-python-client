# coding: utf-8

"""
    RadioManager

    RadioManager  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@pluxbox.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from radiomanager_sdk.models.tag_relations_broadcasts import TagRelationsBroadcasts  # noqa: F401,E501
from radiomanager_sdk.models.tag_relations_contacts import TagRelationsContacts  # noqa: F401,E501
from radiomanager_sdk.models.tag_relations_items import TagRelationsItems  # noqa: F401,E501
from radiomanager_sdk.models.tag_relations_programs import TagRelationsPrograms  # noqa: F401,E501


class TagRelations(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'broadcasts': 'TagRelationsBroadcasts',
        'programs': 'TagRelationsPrograms',
        'contacts': 'TagRelationsContacts',
        'items': 'TagRelationsItems'
    }

    attribute_map = {
        'broadcasts': 'broadcasts',
        'programs': 'programs',
        'contacts': 'contacts',
        'items': 'items'
    }

    def __init__(self, broadcasts=None, programs=None, contacts=None, items=None):  # noqa: E501
        """TagRelations - a model defined in Swagger"""  # noqa: E501

        self._broadcasts = None
        self._programs = None
        self._contacts = None
        self._items = None
        self.discriminator = None

        if broadcasts is not None:
            self.broadcasts = broadcasts
        if programs is not None:
            self.programs = programs
        if contacts is not None:
            self.contacts = contacts
        if items is not None:
            self.items = items

    @property
    def broadcasts(self):
        """Gets the broadcasts of this TagRelations.  # noqa: E501


        :return: The broadcasts of this TagRelations.  # noqa: E501
        :rtype: TagRelationsBroadcasts
        """
        return self._broadcasts

    @broadcasts.setter
    def broadcasts(self, broadcasts):
        """Sets the broadcasts of this TagRelations.


        :param broadcasts: The broadcasts of this TagRelations.  # noqa: E501
        :type: TagRelationsBroadcasts
        """

        self._broadcasts = broadcasts

    @property
    def programs(self):
        """Gets the programs of this TagRelations.  # noqa: E501


        :return: The programs of this TagRelations.  # noqa: E501
        :rtype: TagRelationsPrograms
        """
        return self._programs

    @programs.setter
    def programs(self, programs):
        """Sets the programs of this TagRelations.


        :param programs: The programs of this TagRelations.  # noqa: E501
        :type: TagRelationsPrograms
        """

        self._programs = programs

    @property
    def contacts(self):
        """Gets the contacts of this TagRelations.  # noqa: E501


        :return: The contacts of this TagRelations.  # noqa: E501
        :rtype: TagRelationsContacts
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this TagRelations.


        :param contacts: The contacts of this TagRelations.  # noqa: E501
        :type: TagRelationsContacts
        """

        self._contacts = contacts

    @property
    def items(self):
        """Gets the items of this TagRelations.  # noqa: E501


        :return: The items of this TagRelations.  # noqa: E501
        :rtype: TagRelationsItems
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this TagRelations.


        :param items: The items of this TagRelations.  # noqa: E501
        :type: TagRelationsItems
        """

        self._items = items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TagRelations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
