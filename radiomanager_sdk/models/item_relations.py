# coding: utf-8

"""
    RadioManager

    RadioManager  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@pluxbox.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from radiomanager_sdk.models.block_relations_broadcast import BlockRelationsBroadcast  # noqa: F401,E501
from radiomanager_sdk.models.broadcast_relations_model_type import BroadcastRelationsModelType  # noqa: F401,E501
from radiomanager_sdk.models.item_relations_block import ItemRelationsBlock  # noqa: F401,E501
from radiomanager_sdk.models.item_relations_campaign import ItemRelationsCampaign  # noqa: F401,E501
from radiomanager_sdk.models.item_relations_contacts import ItemRelationsContacts  # noqa: F401,E501
from radiomanager_sdk.models.item_relations_program import ItemRelationsProgram  # noqa: F401,E501
from radiomanager_sdk.models.item_relations_tags import ItemRelationsTags  # noqa: F401,E501


class ItemRelations(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'block': 'ItemRelationsBlock',
        'broadcast': 'BlockRelationsBroadcast',
        'program': 'ItemRelationsProgram',
        'contacts': 'ItemRelationsContacts',
        'tags': 'ItemRelationsTags',
        'campaign': 'ItemRelationsCampaign',
        'model_type': 'BroadcastRelationsModelType'
    }

    attribute_map = {
        'block': 'block',
        'broadcast': 'broadcast',
        'program': 'program',
        'contacts': 'contacts',
        'tags': 'tags',
        'campaign': 'campaign',
        'model_type': 'model_type'
    }

    def __init__(self, block=None, broadcast=None, program=None, contacts=None, tags=None, campaign=None, model_type=None):  # noqa: E501
        """ItemRelations - a model defined in Swagger"""  # noqa: E501

        self._block = None
        self._broadcast = None
        self._program = None
        self._contacts = None
        self._tags = None
        self._campaign = None
        self._model_type = None
        self.discriminator = None

        if block is not None:
            self.block = block
        if broadcast is not None:
            self.broadcast = broadcast
        if program is not None:
            self.program = program
        if contacts is not None:
            self.contacts = contacts
        if tags is not None:
            self.tags = tags
        if campaign is not None:
            self.campaign = campaign
        if model_type is not None:
            self.model_type = model_type

    @property
    def block(self):
        """Gets the block of this ItemRelations.  # noqa: E501


        :return: The block of this ItemRelations.  # noqa: E501
        :rtype: ItemRelationsBlock
        """
        return self._block

    @block.setter
    def block(self, block):
        """Sets the block of this ItemRelations.


        :param block: The block of this ItemRelations.  # noqa: E501
        :type: ItemRelationsBlock
        """

        self._block = block

    @property
    def broadcast(self):
        """Gets the broadcast of this ItemRelations.  # noqa: E501


        :return: The broadcast of this ItemRelations.  # noqa: E501
        :rtype: BlockRelationsBroadcast
        """
        return self._broadcast

    @broadcast.setter
    def broadcast(self, broadcast):
        """Sets the broadcast of this ItemRelations.


        :param broadcast: The broadcast of this ItemRelations.  # noqa: E501
        :type: BlockRelationsBroadcast
        """

        self._broadcast = broadcast

    @property
    def program(self):
        """Gets the program of this ItemRelations.  # noqa: E501


        :return: The program of this ItemRelations.  # noqa: E501
        :rtype: ItemRelationsProgram
        """
        return self._program

    @program.setter
    def program(self, program):
        """Sets the program of this ItemRelations.


        :param program: The program of this ItemRelations.  # noqa: E501
        :type: ItemRelationsProgram
        """

        self._program = program

    @property
    def contacts(self):
        """Gets the contacts of this ItemRelations.  # noqa: E501


        :return: The contacts of this ItemRelations.  # noqa: E501
        :rtype: ItemRelationsContacts
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this ItemRelations.


        :param contacts: The contacts of this ItemRelations.  # noqa: E501
        :type: ItemRelationsContacts
        """

        self._contacts = contacts

    @property
    def tags(self):
        """Gets the tags of this ItemRelations.  # noqa: E501


        :return: The tags of this ItemRelations.  # noqa: E501
        :rtype: ItemRelationsTags
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ItemRelations.


        :param tags: The tags of this ItemRelations.  # noqa: E501
        :type: ItemRelationsTags
        """

        self._tags = tags

    @property
    def campaign(self):
        """Gets the campaign of this ItemRelations.  # noqa: E501


        :return: The campaign of this ItemRelations.  # noqa: E501
        :rtype: ItemRelationsCampaign
        """
        return self._campaign

    @campaign.setter
    def campaign(self, campaign):
        """Sets the campaign of this ItemRelations.


        :param campaign: The campaign of this ItemRelations.  # noqa: E501
        :type: ItemRelationsCampaign
        """

        self._campaign = campaign

    @property
    def model_type(self):
        """Gets the model_type of this ItemRelations.  # noqa: E501


        :return: The model_type of this ItemRelations.  # noqa: E501
        :rtype: BroadcastRelationsModelType
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this ItemRelations.


        :param model_type: The model_type of this ItemRelations.  # noqa: E501
        :type: BroadcastRelationsModelType
        """

        self._model_type = model_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemRelations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
