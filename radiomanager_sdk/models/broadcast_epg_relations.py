# coding: utf-8

"""
    RadioManager

    RadioManager  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@pluxbox.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from radiomanager_sdk.configuration import Configuration


class BroadcastEPGRelations(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'items': 'BroadcastRelationsItems',
        'blocks': 'BroadcastRelationsBlocks',
        'program': 'BlockRelationsProgram',
        'tags': 'BroadcastRelationsTags',
        'presenters': 'list[PresenterEPGResult]',
        'model_type': 'BroadcastRelationsModelType'
    }

    attribute_map = {
        'items': 'items',
        'blocks': 'blocks',
        'program': 'program',
        'tags': 'tags',
        'presenters': 'presenters',
        'model_type': 'model_type'
    }

    def __init__(self, items=None, blocks=None, program=None, tags=None, presenters=None, model_type=None, local_vars_configuration=None):  # noqa: E501
        """BroadcastEPGRelations - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._items = None
        self._blocks = None
        self._program = None
        self._tags = None
        self._presenters = None
        self._model_type = None
        self.discriminator = None

        if items is not None:
            self.items = items
        if blocks is not None:
            self.blocks = blocks
        if program is not None:
            self.program = program
        if tags is not None:
            self.tags = tags
        if presenters is not None:
            self.presenters = presenters
        if model_type is not None:
            self.model_type = model_type

    @property
    def items(self):
        """Gets the items of this BroadcastEPGRelations.  # noqa: E501


        :return: The items of this BroadcastEPGRelations.  # noqa: E501
        :rtype: BroadcastRelationsItems
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this BroadcastEPGRelations.


        :param items: The items of this BroadcastEPGRelations.  # noqa: E501
        :type: BroadcastRelationsItems
        """

        self._items = items

    @property
    def blocks(self):
        """Gets the blocks of this BroadcastEPGRelations.  # noqa: E501


        :return: The blocks of this BroadcastEPGRelations.  # noqa: E501
        :rtype: BroadcastRelationsBlocks
        """
        return self._blocks

    @blocks.setter
    def blocks(self, blocks):
        """Sets the blocks of this BroadcastEPGRelations.


        :param blocks: The blocks of this BroadcastEPGRelations.  # noqa: E501
        :type: BroadcastRelationsBlocks
        """

        self._blocks = blocks

    @property
    def program(self):
        """Gets the program of this BroadcastEPGRelations.  # noqa: E501


        :return: The program of this BroadcastEPGRelations.  # noqa: E501
        :rtype: BlockRelationsProgram
        """
        return self._program

    @program.setter
    def program(self, program):
        """Sets the program of this BroadcastEPGRelations.


        :param program: The program of this BroadcastEPGRelations.  # noqa: E501
        :type: BlockRelationsProgram
        """

        self._program = program

    @property
    def tags(self):
        """Gets the tags of this BroadcastEPGRelations.  # noqa: E501


        :return: The tags of this BroadcastEPGRelations.  # noqa: E501
        :rtype: BroadcastRelationsTags
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this BroadcastEPGRelations.


        :param tags: The tags of this BroadcastEPGRelations.  # noqa: E501
        :type: BroadcastRelationsTags
        """

        self._tags = tags

    @property
    def presenters(self):
        """Gets the presenters of this BroadcastEPGRelations.  # noqa: E501


        :return: The presenters of this BroadcastEPGRelations.  # noqa: E501
        :rtype: list[PresenterEPGResult]
        """
        return self._presenters

    @presenters.setter
    def presenters(self, presenters):
        """Sets the presenters of this BroadcastEPGRelations.


        :param presenters: The presenters of this BroadcastEPGRelations.  # noqa: E501
        :type: list[PresenterEPGResult]
        """

        self._presenters = presenters

    @property
    def model_type(self):
        """Gets the model_type of this BroadcastEPGRelations.  # noqa: E501


        :return: The model_type of this BroadcastEPGRelations.  # noqa: E501
        :rtype: BroadcastRelationsModelType
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this BroadcastEPGRelations.


        :param model_type: The model_type of this BroadcastEPGRelations.  # noqa: E501
        :type: BroadcastRelationsModelType
        """

        self._model_type = model_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BroadcastEPGRelations):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BroadcastEPGRelations):
            return True

        return self.to_dict() != other.to_dict()
