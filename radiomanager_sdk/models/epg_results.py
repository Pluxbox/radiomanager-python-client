# coding: utf-8

"""
    RadioManager

    RadioManager  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@pluxbox.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from radiomanager_sdk.configuration import Configuration


class EPGResults(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'days': 'list[BroadcastEPGDay]',
        'next_page_url': 'str',
        'prev_page_url': 'str'
    }

    attribute_map = {
        'days': 'days',
        'next_page_url': 'next_page_url',
        'prev_page_url': 'prev_page_url'
    }

    def __init__(self, days=None, next_page_url=None, prev_page_url=None, local_vars_configuration=None):  # noqa: E501
        """EPGResults - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._days = None
        self._next_page_url = None
        self._prev_page_url = None
        self.discriminator = None

        self.days = days
        self.next_page_url = next_page_url
        self.prev_page_url = prev_page_url

    @property
    def days(self):
        """Gets the days of this EPGResults.  # noqa: E501


        :return: The days of this EPGResults.  # noqa: E501
        :rtype: list[BroadcastEPGDay]
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this EPGResults.


        :param days: The days of this EPGResults.  # noqa: E501
        :type: list[BroadcastEPGDay]
        """
        if self.local_vars_configuration.client_side_validation and days is None:  # noqa: E501
            raise ValueError("Invalid value for `days`, must not be `None`")  # noqa: E501

        self._days = days

    @property
    def next_page_url(self):
        """Gets the next_page_url of this EPGResults.  # noqa: E501


        :return: The next_page_url of this EPGResults.  # noqa: E501
        :rtype: str
        """
        return self._next_page_url

    @next_page_url.setter
    def next_page_url(self, next_page_url):
        """Sets the next_page_url of this EPGResults.


        :param next_page_url: The next_page_url of this EPGResults.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and next_page_url is None:  # noqa: E501
            raise ValueError("Invalid value for `next_page_url`, must not be `None`")  # noqa: E501

        self._next_page_url = next_page_url

    @property
    def prev_page_url(self):
        """Gets the prev_page_url of this EPGResults.  # noqa: E501


        :return: The prev_page_url of this EPGResults.  # noqa: E501
        :rtype: str
        """
        return self._prev_page_url

    @prev_page_url.setter
    def prev_page_url(self, prev_page_url):
        """Sets the prev_page_url of this EPGResults.


        :param prev_page_url: The prev_page_url of this EPGResults.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and prev_page_url is None:  # noqa: E501
            raise ValueError("Invalid value for `prev_page_url`, must not be `None`")  # noqa: E501

        self._prev_page_url = prev_page_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EPGResults):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EPGResults):
            return True

        return self.to_dict() != other.to_dict()
