# coding: utf-8

"""
    RadioManager

    RadioManager  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@pluxbox.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from radiomanager_sdk.models.genre import Genre  # noqa: F401,E501
from radiomanager_sdk.models.genre_output_only import GenreOutputOnly  # noqa: F401,E501
from radiomanager_sdk.models.genre_relations import GenreRelations  # noqa: F401,E501
from radiomanager_sdk.models.genre_relations_broadcasts import GenreRelationsBroadcasts  # noqa: F401,E501
from radiomanager_sdk.models.genre_relations_programs import GenreRelationsPrograms  # noqa: F401,E501


class GenreResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'urn': 'str',
        'parent_id': 'int',
        'name': 'str',
        'broadcasts': 'GenreRelationsBroadcasts',
        'programs': 'GenreRelationsPrograms',
        'external_station_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'urn': 'urn',
        'parent_id': 'parent_id',
        'name': 'name',
        'broadcasts': 'broadcasts',
        'programs': 'programs',
        'external_station_id': '_external_station_id'
    }

    def __init__(self, id=None, urn=None, parent_id=None, name=None, broadcasts=None, programs=None, external_station_id=None):  # noqa: E501
        """GenreResult - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._urn = None
        self._parent_id = None
        self._name = None
        self._broadcasts = None
        self._programs = None
        self._external_station_id = None
        self.discriminator = None

        self.id = id
        if urn is not None:
            self.urn = urn
        if parent_id is not None:
            self.parent_id = parent_id
        self.name = name
        if broadcasts is not None:
            self.broadcasts = broadcasts
        if programs is not None:
            self.programs = programs
        if external_station_id is not None:
            self.external_station_id = external_station_id

    @property
    def id(self):
        """Gets the id of this GenreResult.  # noqa: E501


        :return: The id of this GenreResult.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GenreResult.


        :param id: The id of this GenreResult.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def urn(self):
        """Gets the urn of this GenreResult.  # noqa: E501


        :return: The urn of this GenreResult.  # noqa: E501
        :rtype: str
        """
        return self._urn

    @urn.setter
    def urn(self, urn):
        """Sets the urn of this GenreResult.


        :param urn: The urn of this GenreResult.  # noqa: E501
        :type: str
        """

        self._urn = urn

    @property
    def parent_id(self):
        """Gets the parent_id of this GenreResult.  # noqa: E501


        :return: The parent_id of this GenreResult.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this GenreResult.


        :param parent_id: The parent_id of this GenreResult.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def name(self):
        """Gets the name of this GenreResult.  # noqa: E501


        :return: The name of this GenreResult.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GenreResult.


        :param name: The name of this GenreResult.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def broadcasts(self):
        """Gets the broadcasts of this GenreResult.  # noqa: E501


        :return: The broadcasts of this GenreResult.  # noqa: E501
        :rtype: GenreRelationsBroadcasts
        """
        return self._broadcasts

    @broadcasts.setter
    def broadcasts(self, broadcasts):
        """Sets the broadcasts of this GenreResult.


        :param broadcasts: The broadcasts of this GenreResult.  # noqa: E501
        :type: GenreRelationsBroadcasts
        """

        self._broadcasts = broadcasts

    @property
    def programs(self):
        """Gets the programs of this GenreResult.  # noqa: E501


        :return: The programs of this GenreResult.  # noqa: E501
        :rtype: GenreRelationsPrograms
        """
        return self._programs

    @programs.setter
    def programs(self, programs):
        """Sets the programs of this GenreResult.


        :param programs: The programs of this GenreResult.  # noqa: E501
        :type: GenreRelationsPrograms
        """

        self._programs = programs

    @property
    def external_station_id(self):
        """Gets the external_station_id of this GenreResult.  # noqa: E501


        :return: The external_station_id of this GenreResult.  # noqa: E501
        :rtype: int
        """
        return self._external_station_id

    @external_station_id.setter
    def external_station_id(self, external_station_id):
        """Sets the external_station_id of this GenreResult.


        :param external_station_id: The external_station_id of this GenreResult.  # noqa: E501
        :type: int
        """

        self._external_station_id = external_station_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenreResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
